# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

-
  name: "main: solace_replay"
  hosts: all
  # gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    solace.pubsub_plus.solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_replay_log:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_get_replay_logs:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_replay_log_trim_logged_msgs:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue_subscription:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_get_queues:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue_start_replay:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue_cancel_replay:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
  vars:
    replay_log_name: replaylog-asc-test-replay
    topic_1: "hello/world"
    topic_2: "no/subscription/for/this/topic"
    queue: "asc_replay_test"
  tasks:
  - name: "gather facts"
    solace_gather_facts:
  # - debug:
  #     msg: "{{ ansible_facts.solace }}"
  - set_fact:
      sempv2_version: "{{ ansible_facts.solace.about.api.sempVersion }}"

  - name: "main: check vars"
    set_fact:
      working_dir: "{{ WORKING_DIR }}"

  - name: "main: ensure working_dir exists"
    file:
      path: "{{ working_dir }}"
      state: directory
    delegate_to: localhost

  - name: "main: delete queue"
    solace_queue:
      name: "{{ queue }}"
      state: absent

  - name: "main: solace_replay_log: delete"
    solace_replay_log:
      name: "{{ replay_log_name }}"
      state: absent
    ignore_errors: yes
    register: result
  - assert:
      that:
      - result.rc == 1
    when: broker_type=='solace_cloud'

  - name: "main: solace_replay_log: create"
    solace_replay_log:
      name: "{{ replay_log_name }}"
      state: present

  - name: "main: solace_replay_log: create"
    solace_replay_log:
      name: another_one
      state: present
    register: result
    ignore_errors: yes
  - assert:
      that:
        - result.rc==1
    when: broker_type=='solace_cloud'

  - name: "main: solace_replay_log: update"
    solace_replay_log:
      name: "{{ replay_log_name }}"
      settings:
        egressEnabled: true
        ingressEnabled: true
        maxSpoolUsage: 1
      state: present

  - name: "get: solace_get_replay_logs:config:all"
    solace_get_replay_logs:
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list|length==1
        - result.result_list_count==1

  - name: "main: solace_get_replay_logs:monitor:all - 1"
    solace_get_replay_logs:
      api: monitor
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list|length==1
        - result.result_list_count==1

  - name: "main: solace_replay_log_trim_logged_msgs"
    solace_replay_log_trim_logged_msgs:
      name: "{{ replay_log_name }}"
      settings:
        olderThanTime: "{{ ansible_date_time.epoch }}"

  - name: "main: solace_get_replay_logs:monitor:all - 1"
    solace_get_replay_logs:
      api: monitor
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list|length==1
        - result.result_list_count==1
  - set_fact:
      before_spool_usage: "{{ result.result_list[0].data.msgSpoolUsage }}"
      num_msgs: "{{ result.result_list[0].collections.msgs.count  }}"
  - assert:
      that:
        - num_msgs|int==0

  - name: "main: call tasks: send 10 messages"
    include_tasks: ./tasks/send-messages.tasks.yml
    vars:
      topic: "{{ topic_1 }}"

  - name: "main: call tasks: send 10 messages"
    include_tasks: ./tasks/send-messages.tasks.yml
    vars:
      topic: "{{ topic_2 }}"

  - name: "main: solace_get_replay_logs:monitor:all - 3"
    solace_get_replay_logs:
      api: monitor
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list_count==1
  - set_fact:
      after_spool_usage: "{{ result.result_list[0].data.msgSpoolUsage }}"
      msg_count: "{{ result.result_list[0].collections.msgs.count }}"
  - assert:
      that:
        - before_spool_usage < after_spool_usage
        # - msg_count|int==10
        - msg_count|int==20

  - name: "main: create queue"
    solace_queue:
      name: "{{ queue }}"
      settings:
        egressEnabled: true
        ingressEnabled: true
      state: present

  - name: "main: add subscription"
    solace_queue_subscription:
      name: "{{ topic_1 }}"
      queue_name: "{{ queue }}"
      state: present

  # replay all messages
  - name: "main: solace_queue_start_replay"
    solace_queue_start_replay:
      queue_name: "{{ queue }}"
      settings:
        fromTime: 123

  - name: "get: solace_get_queues(monitor)"
    solace_get_queues:
      api: monitor
      query_params:
        where:
          - "queueName=={{ queue }}"
        # select:
        #   - msgs
        #   - replay*
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list_count==1

  - set_fact:
      spooled_msg_count: "{{ result.result_list[0].data.currentSpooledMsgCount }}"
    when: result.result_list[0].data.currentSpooledMsgCount is defined
  - set_fact:
      spooled_msg_count: "{{ result.result_list[0].data.spooledMsgCount }}"
      when: result.result_list[0].data.spooledMsgCount is defined
  - assert:
      that:
        - spooled_msg_count|int==10

  - name: "main: solace_queue_cancel_replay"
    solace_queue_cancel_replay:
      queue_name: "{{ queue }}"
      settings:
        forceComplete: true

  - name: "main: solace_queue: absent"
    solace_queue:
      name: "{{ queue }}"
      state: absent

  - name: "main: solace_replay_log_trim_logged_msgs"
    solace_replay_log_trim_logged_msgs:
      name: "{{ replay_log_name }}"
      settings:
        olderThanTime: "{{ ansible_date_time.epoch }}"

  - name: "main: solace_get_replay_logs:monitor:all - last"
    solace_get_replay_logs:
      api: monitor
    register: result
  - assert:
      that:
        - result.rc==0
        - result.result_list|length==1
        - result.result_list_count==1
  - set_fact:
      num_msgs: "{{ result.result_list[0].collections.msgs.count  }}"
  - assert:
      that:
        - num_msgs|int==0

  - name: "main: solace_replay_log: absent"
    solace_replay_log:
      name: "{{ replay_log_name }}"
      state: absent
    when: broker_type == 'local'

###
# The End.
