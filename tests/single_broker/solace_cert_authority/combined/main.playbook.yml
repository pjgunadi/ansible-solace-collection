# Copyright (c) 2022, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

-
  name: "main: solace_cert_authority"
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    solace.pubsub_plus.solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_client_cert_authority:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_get_client_cert_authorities:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_domain_cert_authority:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_get_domain_cert_authorities:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
  pre_tasks:
  - include_vars:
      file: "get.vars.yml"
      name: target_vars
  tasks:
  - name: "check sempv2 version / solace cloud"
    solace_gather_facts:
    # no_log: true
  - set_fact:
      is_solace_cloud: "{{ ansible_facts.solace.isSolaceCloud }}"
      sempv2_version: "{{ ansible_facts.solace.about.api.sempVersion }}"
  - meta: end_play
    when: sempv2_version|float < 2.19

  - set_fact:
      working_dir: "{{ WORKING_DIR }}"
      client_target_list: "{{ target_vars.client }}"
      domain_target_list: "{{ target_vars.domain }}"

  - name: "main: solace_client_cert_authority: delete all"
    solace_client_cert_authority:
      name: "{{ item.name }}"
      state: absent
    loop: "{{ client_target_list.cert_authority_names }}"

  - name: "main: solace_domain_cert_authority: delete all"
    solace_domain_cert_authority:
      name: "{{ item.name }}"
      state: absent
    loop: "{{ domain_target_list.cert_authority_names }}"

  - name: "main: include client cert add tasks"
    include_tasks: ./client-tasks/add.tasks.yml
    loop: "{{ client_target_list.cert_authority_names }}"

  - name: "main: include domain cert add tasks"
    include_tasks: ./domain-tasks/add.tasks.yml
    loop: "{{ domain_target_list.cert_authority_names }}"

  - name: "main: config: solace_get_client_cert_authorities: list"
    solace_get_client_cert_authorities:
    register: result
  - assert:
      that: result.result_list_count == client_target_list.cert_authority_names|length

  - name: "main: config: solace_get_domain_cert_authorities: list"
    solace_get_domain_cert_authorities:
    register: result
  - assert:
      that: result.result_list_count == domain_target_list.cert_authority_names|length

  - name: "main: config: solace_get_client_cert_authorities: list"
    solace_get_client_cert_authorities:
      query_params:
        where:
          - "certAuthorityName=={{ client_target_list.where_pattern }}"
        select:
          - "certAuthorityName"
    register: result
  - assert:
      that: result.result_list_count == client_target_list.cert_authority_names|length

  - name: "main: config: solace_get_domain_cert_authorities: list"
    solace_get_domain_cert_authorities:
      query_params:
        where:
          - "certAuthorityName=={{ domain_target_list.where_pattern }}"
        select:
          - "certAuthorityName"
    register: result
  - assert:
      that: result.result_list_count == domain_target_list.cert_authority_names|length

###
# The End.
