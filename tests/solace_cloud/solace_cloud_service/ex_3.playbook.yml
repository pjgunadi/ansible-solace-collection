#!/usr/bin/env bash
# (c) 2020 Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

-
  name: "ex_3: solace_cloud_service: test for Delta Changes"
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  pre_tasks:
  - include_vars:
      file: "solace-cloud-service.vars.yml"
      name: sc_services
  tasks:
    - name: "Check vars"
      set_fact:
        working_dir: "{{ WORKING_DIR }}"
        api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
        api_token_restriced: "{{ SOLACE_CLOUD_API_TOKEN_RESTRICTED }}"
        sc_account_name: "{{ inventory_hostname }}"

    - set_fact:
        sc_service: "{{ sc_services.solace_cloud_services[0] }}"
    - set_fact:
        sc_service_name: "{{ sc_service.name }}"
        sc_service_vpn: "{{ sc_service.msgVpnName }}"

    - name: "ex_3: Create New Service"
      solace_cloud_service:
        api_token: "{{ api_token }}"
        name: "{{ sc_service_name }}"
        settings:
          msgVpnName: "{{ sc_service_vpn }}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          # attributes:
          #   customizedMessagingPorts:
          #     serviceSmfPlainTextListenPort: 55555
          #     serviceSmfCompressedListenPort: 55003
          #     serviceSmfTlsListenPort: 55443
        state: present
      register: result

    - set_fact:
        sc_service_id: "{{ result.response.serviceId }}"

    - name: "ex_3: Wait for Service Provisioning to Complete"
      solace_cloud_get_service:
        api_token: "{{ api_token }}"
        service_id: "{{ sc_service_id }}"
      register: result
      until: "result.rc != 0 or result.service.creationState == 'completed'"
      retries: 3
      delay: 30 # Every 30 seconds

    - name: "ex_3: No Update"
      solace_cloud_service:
        api_token: "{{ api_token }}"
        name: "{{ sc_service.name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
        state: present
      register: result
    - assert:
        that:  result.rc == 0 and result.changed == False

    - name: "ex_3: Update msgVpnName"
      solace_cloud_service:
        api_token: "{{ api_token }}"
        name: "{{ sc_service_name }}"
        settings:
          msgVpnName: "{{ sc_service.msgVpnName}}-update"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
        state: present
      register: result
      ignore_errors: yes
    - assert:
        that:
          - result.rc==1
          - "'already exists' in result.msg|string"
          - "result.delta.msgVpnName == '{{ sc_service.msgVpnName}}-update'"

    - name: "ex_3: Update Ports"
      solace_cloud_service:
        api_token: "{{ api_token }}"
        name: "{{ sc_service_name }}"
        settings:
          msgVpnName: "{{ sc_service_vpn }}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId}}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          attributes:
            customizedMessagingPorts:
              serviceSmfPlainTextListenPort: 1111
        state: present
      register: result
      ignore_errors: yes
    - assert:
        that: result.rc == 1 and 'already exists' in result.msg | string and result.delta.attributes.customizedMessagingPorts.serviceSmfPlainTextListenPort == 1111

###
# The End.
