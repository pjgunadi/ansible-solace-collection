# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

---

- name: "Check vars"
  assert:
    that:
      - sc_service is defined
      - SOLACE_CLOUD_API_TOKEN is defined
      - working_dir is defined
      - env is defined
      - created_services_dict is defined
    fail_msg: "one or more variables not defined"

- name: First Run
  block:
    - name: "Ensure Solace Cloud Service does not exist"
      solace_cloud_service:
        api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
        name: "{{ sc_service.name }}"
        state: absent

    - name: "Create Solace Cloud Service - No waiting"
      solace_cloud_service:
        api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
        name: "{{ sc_service.name }}"
        wait_timeout_minutes: 0
        settings:
          msgVpnName: "{{ sc_service.msgVpnName }}"
          datacenterId: "{{ sc_service.datacenterId }}"
          serviceTypeId: "{{ sc_service.serviceTypeId }}"
          serviceClassId: "{{ sc_service.serviceClassId }}"
          eventBrokerVersion: "{{ sc_service.eventBrokerVersion }}"
          attributes: "{{ sc_service.attributes | default(omit) }}"
        state: present
      register: result

    - set_fact:
        sc_service_id: "{{ result.response.serviceId }}"
        sc_service_info: "{{ result.response }}"

    - name: "Get Solace Cloud Service Inventory"
      solace_cloud_get_facts:
        from_dict: "{{ sc_service_info }}"
        get_formattedHostInventory:
          host_entry: "{{ sc_service.name }}"
          meta:
            service_name: "{{ sc_service_info.name }}"
            sc_service_id: "{{ sc_service_info.serviceId }}"
            datacenterId: "{{ sc_service_info.datacenterId }}"
            serviceTypeId: "{{ sc_service_info.serviceTypeId}}"
            serviceClassId: "{{ sc_service_info.serviceClassId }}"
            eventBrokerVersion: "{{ sc_service.eventBrokerVersion }}"
            serviceClassDisplayedAttributes: "{{ sc_service_info.serviceClassDisplayedAttributes }}"
      register: result
      ignore_errors: yes
    - name: "assert for run_number = {{ run_number }}"
      assert:
        that: result.rc == 1 and ('service.creationState=pending' in result.msg[1] or 'service.creationState=inProgress' in result.msg[1])
  when: run_number == 1

- name: "Create Solace Cloud Service - wait until completed"
  solace_cloud_service:
    api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"
    name: "{{ sc_service.name }}"
    wait_timeout_minutes: 30
    settings:
      msgVpnName: "{{ sc_service.msgVpnName }}"
      datacenterId: "{{ sc_service.datacenterId }}"
      serviceTypeId: "{{ sc_service.serviceTypeId }}"
      serviceClassId: "{{ sc_service.serviceClassId }}"
      eventBrokerVersion: "{{ sc_service.eventBrokerVersion }}"
      attributes: "{{ sc_service.attributes | default(omit) }}"
    state: present
  register: result

- set_fact:
    sc_service_id: "{{ result.response.serviceId }}"
    sc_service_info: "{{ result.response }}"

- name: "Get Solace Cloud Service Inventory"
  solace_cloud_get_facts:
    from_dict: "{{ sc_service_info }}"
    get_formattedHostInventory:
      host_entry: "{{ sc_service.name }}"
      meta:
        service_name: "{{ sc_service_info.name }}"
        sc_service_id: "{{ sc_service_info.serviceId }}"
        datacenterId: "{{ sc_service_info.datacenterId }}"
        serviceTypeId: "{{ sc_service_info.serviceTypeId}}"
        serviceClassId: "{{ sc_service_info.serviceClassId }}"
        eventBrokerVersion: "{{ sc_service.eventBrokerVersion }}"        
        serviceClassDisplayedAttributes: "{{ sc_service_info.serviceClassDisplayedAttributes }}"
  register: result

- name: "Save Solace Cloud Service Inventory to File"
  copy:
    content: "{{ result.facts.formattedHostInventory | to_nice_yaml }}"
    dest: "{{ WORKING_DIR }}/{{ sc_service.msgVpnName }}.{{ env.broker_inventory_file_name_postfix }}"
  changed_when: false
  delegate_to: localhost

- name: "Add new solace cloud service to dict"
  set_fact:
    created_services_dict: "{{ created_services_dict | combine(result.facts.formattedHostInventory.all.hosts, recursive=True) }}"

###
# The End.
