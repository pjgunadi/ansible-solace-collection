# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

-
  name: "main: solace_bridges"
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    solace.pubsub_plus.solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_get_dmr_clusters:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_dmr_cluster:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_dmr_link:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_get_dmr_cluster_links:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_dmr_cluster_link:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_dmr_cluster_link_remote_address:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_get_dmr_cluster_link_remote_addresses:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_dmr_cluster_link_trusted_cn:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_get_dmr_cluster_link_trusted_cns:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
    solace.pubsub_plus.solace_get_dmr_bridges:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_dmr_bridge:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
  pre_tasks:
  - include_vars:
      file: "dmr_topology.yml"
      name: dmr_topology
  vars:
      dmr_cluster_link_trusted_cn: "*.messaging.solace.cloud"

  tasks:
    - name: "main: check vars"
      set_fact:
        working_dir: "{{ WORKING_DIR }}"
        sc_api_token: "{{ SOLACE_CLOUD_API_TOKEN }}"

    - name: "main: check the broker is solace cloud"
      fail:
        msg: "only solace cloud supported, broker_type={{ broker_type }}"
      when: broker_type != 'solace_cloud'

    - name: "main: solace_gather_facts"
      solace_gather_facts:

    - name: "main: solace_get_facts: get_serviceDmrClusterConnectionDetails"
      solace_get_facts:
        hostvars: "{{ hostvars }}"
        hostvars_inventory_hostname: "{{ inventory_hostname }}"
        msg_vpn: "{{ vpn }}"
        get_functions:
          - get_serviceDmrClusterConnectionDetails
      register: result
    - set_fact:
        dmr_cluster_connection_details: "{{ result.facts.serviceDmrClusterConnectionDetails }}"
    - set_fact:
        dmr_cluster_name: "{{ dmr_cluster_connection_details.clusterName }}"
        dmr_cluster_password: "{{ dmr_cluster_connection_details.password }}"

    - name: "main: save dmr_cluster_connection_details for {{ inventory_hostname }}"
      copy:
        content: "{{ dmr_cluster_connection_details | to_nice_yaml }}"
        dest: "{{ working_dir }}/{{ inventory_hostname }}.dmr_cluster_connection_details.yml"
      delegate_to: localhost

    - name: "main: solace_get_dmr_clusters"
      solace_get_dmr_clusters:
      register: result
    - assert:
        that:
          - result.rc == 0
          - result.result_list | length == 1
          - result.result_list_count == 1
    - set_fact:
        dmr_cluster_info: "{{ result.result_list[0] }}"

    - name: "main: solace_dmr_cluster: create"
      solace_dmr_cluster:
        name: foo
      ignore_errors: yes
      register: result
    - assert:
        that:
          - result.rc == 1
          - "'MAX_NUM_EXCEEDED' in result.msg | string"

    - name: "main: solace_dmr_cluster: update"
      solace_dmr_cluster:
        name: "{{ dmr_cluster_name }}"
        settings:
          tlsServerCertMaxChainDepth: 5
      register: result
      ignore_errors: yes
    - assert:
        that:
          - result.rc == 1
          - "'UNAUTHORIZED' in result.msg | string"
      when: broker_type == 'solace_cloud'

    - name: "main: solace_dmr_cluster: update"
      solace_dmr_cluster:
        name: "{{ dmr_cluster_name }}"
        settings:
          authenticationBasicEnabled: true
          authenticationBasicType: internal
      register: result

    - name: "main: solace_get_dmr_cluster_links: config"
      solace_get_dmr_cluster_links:
        dmr_cluster_name: "{{ dmr_cluster_name }}"
      register: result

    - name: "main: solace_dmr_cluster_link: delete all"
      solace_dmr_cluster_link:
        remote_node_name: "{{ item.data.remoteNodeName }}"
        dmr_cluster_name: "{{ dmr_cluster_name }}"
        state: absent
      loop: "{{ result.result_list }}"

    - name: "main: solace_get_dmr_cluster_links: config"
      solace_get_dmr_cluster_links:
        api: config
        dmr_cluster_name: "{{ dmr_cluster_name }}"
      register: result
    - assert:
        that:
          - result.rc == 0
          - result.result_list | length == 0
          - result.result_list_count == 0

    - name: "main: solace_get_dmr_cluster_links: monitor"
      solace_get_dmr_cluster_links:
        api: monitor
        dmr_cluster_name: "{{ dmr_cluster_name }}"
      register: result
    - assert:
        that:
          - result.rc == 0
          - result.result_list | length == 0
          - result.result_list_count == 0

    - name: "main: get remote_host_names from topology for {{ inventory_hostname }}"
      set_fact:
      # get the dmr_topology for this host
        dmr_ext_links_remote_host_names: "{{ dmr_topology[inventory_hostname].external_links.remote_host_names | default(omit) }}"
    - assert:
        that:
          - dmr_ext_links_remote_host_names is defined
          - dmr_ext_links_remote_host_names | length == 2

    - name: "main: block: setup ext-link and check if up for {{ inventory_hostname }}"
      block:
      - name: "main: call setup ext-link tasks"
        include_tasks: ./tasks/setup.ext-link.tasks.yml
        loop: "{{ dmr_ext_links_remote_host_names }}"
        loop_control:
          loop_var: remote_host_name
      - name: "main: wait for links to be established"
        pause:
          seconds: 10
      - name: "main: call check ext-link tasks"
        include_tasks: ./tasks/check.ext-link.tasks.yml
        loop: "{{ dmr_ext_links_remote_host_names }}"
        loop_control:
          loop_var: remote_host_name

    - name: "main: solace_get_dmr_clusters - monitor - check if cluster is up"
      solace_get_dmr_clusters:
        api: monitor
        query_params:
          where:
            - "dmrClusterName=={{ dmr_cluster_name }}"
      register: result
    - assert:
        that:
          - result.rc == 0
          - result.result_list | length == 1
          - result.result_list_count == 1
          - result.result_list[0].data.up

    - name: "main: call delete ext-link tasks"
      include_tasks: ./tasks/delete.ext-link.tasks.yml
      loop: "{{ dmr_ext_links_remote_host_names }}"
      loop_control:
        loop_var: remote_host_name


###
# The End.
