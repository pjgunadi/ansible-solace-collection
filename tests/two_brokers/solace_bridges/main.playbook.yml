# Copyright (c) 2020, Solace Corporation, Ricardo Gomez-Ulmke, <ricardo.gomez-ulmke@solace.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

-
  name: "main: solace_bridges"
  hosts: all
  gather_facts: no
  any_errors_fatal: true
  collections:
    - solace.pubsub_plus
  module_defaults:
    solace.pubsub_plus.solace_gather_facts:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      solace_cloud_api_token: "{{ SOLACE_CLOUD_API_TOKEN if broker_type=='solace_cloud' else omit }}"
      solace_cloud_service_id: "{{ solace_cloud_service_id | default(omit) }}"
    solace.pubsub_plus.solace_get_bridges:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_get_bridge_remote_vpns:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_client_username:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_queue_subscription:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_bridge:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_bridge_remote_vpn:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_bridge_trusted_cn:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
    solace.pubsub_plus.solace_bridge_remote_subscription:
      host: "{{ sempv2_host }}"
      port: "{{ sempv2_port }}"
      secure_connection: "{{ sempv2_is_secure_connection }}"
      username: "{{ sempv2_username }}"
      password: "{{ sempv2_password }}"
      timeout: "{{ sempv2_timeout }}"
      msg_vpn: "{{ vpn }}"
  pre_tasks:
  - include_vars:
      file: "bridges.topology.yml"
      name: bridges_topology
  vars:
      bridge_name: "asct_test_bridge"

  tasks:

    - name: "main: solace_gather_facts"
      solace_gather_facts:

    - name: "main: solace_bridge: delete"
      solace_bridge:
        name: "{{ bridge_name }}"
        virtual_router: auto
        state: absent

    - name: "main: solace_get_bridges: {{ bridge_name }}"
      solace_get_bridges:
        query_params:
          where:
            - "bridgeName=={{ bridge_name }}"
      register: result
    - assert:
        that:
          - result.rc==0
          - result.result_list==[]
          - result.result_list_count==0

    - name: "main: solace_client_username: create"
      solace_client_username:
        name: "{{ bridge_name }}"
        settings:
          enabled: true
          password: "{{ bridge_name }}"
        state: present

    - name: "main: solace_queue: create"
      solace_queue:
        name: "{{ bridge_name }}"
        settings:
          owner: "{{ bridge_name }}"
          permission: consume
          egressEnabled: true
          ingressEnabled: true
        state: present

    - name: "main: solace_queue_subscription: create"
      solace_queue_subscription:
        queue_name: "{{ bridge_name }}"
        topic: "ansible/solace/test/bridge/queue/>"
        state: present

    - name: "main: solace_bridge: create"
      solace_bridge:
        name: "{{ bridge_name }}"
        settings:
          enabled: false
          remoteAuthenticationBasicClientUsername: "{{ bridge_name }}"
          remoteAuthenticationBasicPassword: "{{ bridge_name }}"
          remoteAuthenticationScheme: basic
        state: present

    - set_fact:
        remote_inventory_hostname: "{{ bridges_topology.bridges[bridge_name][inventory_hostname].remote_host }}"
        remote_vpn: "{{ bridges_topology.bridges[bridge_name][inventory_hostname].remote_vpn }}"

    - name: "main: check the Remote Host Settings for the Bridge"
      debug:
        msg:
          - "remote_host: {{ remote_inventory_hostname }}"
          - "remote_vpn: {{ remote_vpn }}"

    - name: "main: solace_get_facts: get_bridge_remoteMsgVpnLocations"
      solace_get_facts:
        hostvars: "{{ hostvars }}"
        hostvars_inventory_hostname: "{{ remote_inventory_hostname }}"
        msg_vpn: "{{ remote_vpn }}"
        get_functions:
          - get_vpnBridgeRemoteMsgVpnLocations
      register: remote_host_bridge

    - name: "main: Print Remote Host Bridge Facts"
      debug:
        msg:
          - "remote host bridge facts:"
          - "{{ remote_host_bridge.facts }}"

    - name: "main: solace_bridge_remote_vpn: add"
      solace_bridge_remote_vpn:
        name: "{{ remote_vpn }}"
        bridge_name: "{{ bridge_name }}"
        bridge_virtual_router: auto
        # choose the correct remote location depending on the settings.tlsEnabled, settings.compressedDataEnabled
        remote_vpn_location: "{{ remote_host_bridge.facts.vpnBridgeRemoteMsgVpnLocations.plain }}"
        settings:
          enabled: false
          tlsEnabled: false
          compressedDataEnabled: false
        state: present

    - name: "main: solace_bridge_remote_vpn: queueBinding"
      solace_bridge_remote_vpn:
        name: "{{ remote_vpn }}"
        bridge_name: "{{ bridge_name }}"
        # choose the correct remote location depending on the settings.tlsEnabled, settings.compressedDataEnabled
        remote_vpn_location: "{{ remote_host_bridge.facts.vpnBridgeRemoteMsgVpnLocations.plain }}"
        settings:
          queueBinding: "{{ bridge_name }}"
        state: present

    - name: "main: solace_bridge_remote_vpn: enable"
      solace_bridge_remote_vpn:
        name: "{{ remote_vpn }}"
        bridge_name: "{{ bridge_name }}"
        bridge_virtual_router: auto
        # choose the correct remote location depending on the settings.tlsEnabled, settings.compressedDataEnabled
        remote_vpn_location: "{{ remote_host_bridge.facts.vpnBridgeRemoteMsgVpnLocations.plain }}"
        settings:
          enabled: true
        state: present

    - name: "main: solace_bridge_trusted_cn: add"
      solace_bridge_trusted_cn:
        name: foo
        bridge_name: "{{ bridge_name }}"

    - name: "main: solace_bridge_remote_subscription: add DA"
      solace_bridge_remote_subscription:
        bridge_name: "{{ bridge_name }}"
        bridge_virtual_router: auto
        remote_subscription_topic: "ansible/solace/test/bridge/da/>"
        settings:
          deliverAlwaysEnabled: true
        state: present

    - name: "main: solace_bridge_remote_subscription: add P1"
      solace_bridge_remote_subscription:
        bridge_name: "{{ bridge_name }}"
        bridge_virtual_router: auto
        remote_subscription_topic: "ansible/solace/test/bridge/p1/>"
        settings:
          deliverAlwaysEnabled: false
        state: present

    - name: "main: solace_bridge: enable"
      solace_bridge:
        name: "{{ bridge_name }}"
        virtual_router: auto
        settings:
          enabled: true
        state: present

    - name: "main: solace_get_bridge_remote_vpns: until remote vpn is up"
      solace_get_bridge_remote_vpns:
        bridge_name: "{{ bridge_name }}"
        api: monitor
        query_params:
          where:
            - "remoteMsgVpnName=={{ remote_vpn }}"
          select:
            - bridgeName
            - remoteMsgVpnLocation
            - enabled
            - up
            - lastConnectionFailureReason
            - compressedDataEnabled
            - tlsEnabled
      register: result
      until:
        - result.result_list[0].data.up == True
      retries: 3
      delay: 5
    - assert:
        that:
          - result.rc==0
          - result.result_list | length == 1
          - result.result_list_count==1
    - name: "main: assert bridge remote vpn is up"
      assert:
        that:
          - result.result_list[0].data.up == True
        fail_msg: "lastConnectionFailureReason={{ result.result_list[0].data.lastConnectionFailureReason }}"

    - name: "main: solace_get_bridges: until bridge is up"
      solace_get_bridges:
        api: monitor
        query_params:
          where:
            - "bridgeName=={{ bridge_name }}"
          select:
            - inboundState
            - inboundFailureReason
            - outboundState
      register: bridge_list
      until:
        - bridge_list.result_list[0].data.inboundState == 'ready-in-sync'
        - bridge_list.result_list[0].data.outboundState == 'ready'
      retries: 3
      delay: 2

    - name: "main: solace_get_bridges"
      solace_get_bridges:
        api: monitor
        query_params:
          where:
            - "bridgeName=={{ bridge_name }}"
      register: bridge_list
    - name: "main: assert bridge is up"
      assert:
        that:
          - bridge_list.result_list[0].data.inboundState == 'ready-in-sync'
          - bridge_list.result_list[0].data.outboundState == 'ready'

  # Remove all the objects created

    - name: "main: solace_bridge_remote_subscription: remove DA"
      solace_bridge_remote_subscription:
        bridge_name: "{{ bridge_name }}"
        remote_subscription_topic: "ansible/solace/test/bridge/da/>"
        state: absent

    - name: "main: solace_bridge_remote_subscription: remove P1"
      solace_bridge_remote_subscription:
        bridge_name: "{{ bridge_name }}"
        remote_subscription_topic: "ansible/solace/test/bridge/p1/>"
        state: absent

    - name: "main: solace_bridge_remote_vpn: remove queueBinding"
      solace_bridge_remote_vpn:
        name: "{{ remote_vpn }}"
        bridge_name: "{{ bridge_name }}"
        # choose the correct remote location depending on the settings.tlsEnabled, settings.compressedDataEnabled
        remote_vpn_location: "{{ remote_host_bridge.facts.vpnBridgeRemoteMsgVpnLocations.plain }}"
        settings:
          queueBinding: ""
        state: present

    - name: "main: solace_bridge_remote_vpn: remove vpn"
      solace_bridge_remote_vpn:
        name: "{{ remote_vpn }}"
        bridge_name: "{{ bridge_name }}"
        # choose the correct remote location depending on the settings.tlsEnabled, settings.compressedDataEnabled
        remote_vpn_location: "{{ remote_host_bridge.facts.vpnBridgeRemoteMsgVpnLocations.plain }}"
        state: absent

    - name: "main: solace_bridge: remove"
      solace_bridge:
        name: "{{ bridge_name }}"
        virtual_router: auto
        state: absent

    - name: "main: solace_queue: remove"
      solace_queue:
        name: "{{ bridge_name }}"
        state: absent

    - name: "main: solace_client_username: remove"
      solace_client_username:
        name: "{{ bridge_name }}"
        state: absent

###
# The End.
